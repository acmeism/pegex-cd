// Generated by CoffeeScript 1.3.3
(function() {
  var Grammar, Parent,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Parent = (require('../../Pegex/Grammar')).Grammar;

  exports.Grammar = Grammar = (function(_super) {

    __extends(Grammar, _super);

    function Grammar() {
      return Grammar.__super__.constructor.apply(this, arguments);
    }

    Grammar.prototype.text = function() {
      return '../pegex-pgx/pegex.pgx';
    };

    Grammar.prototype.make_tree = function() {
      return {
        "+grammar": "pegex",
        "+toprule": "grammar",
        "+version": "0.1.0",
        "all_group": {
          "+min": 1,
          ".ref": "rule_part",
          ".sep": {
            ".rgx": "(?:\\s|\\#.*\\n)*"
          }
        },
        "any_group": {
          "+min": "2",
          ".ref": "rule_part",
          ".sep": {
            ".rgx": "(?:\\s|\\#.*\\n)*\\|(?:\\s|\\#.*\\n)*"
          }
        },
        "bracketed_group": {
          ".all": [
            {
              ".rgx": "(\\.?)\\((?:\\s|\\#.*\\n)*"
            }, {
              ".ref": "rule_group"
            }, {
              ".rgx": "(?:\\s|\\#.*\\n)*\\)((?:[\\*\\+\\?]|[0-9]+(?:\\-[0-9]+|\\+)?)?)"
            }
          ]
        },
        "ending": {
          ".rgx": "(?:\\s|\\#.*\\n)*?(?:\\n(?:\\s|\\#.*\\n)*|;(?:\\s|\\#.*\\n)*|\\z)"
        },
        "error_message": {
          ".rgx": "`([^`\\r\\n]*)`"
        },
        "grammar": {
          ".all": [
            {
              ".ref": "meta_section"
            }, {
              ".ref": "rule_section"
            }
          ]
        },
        "meta_definition": {
          ".rgx": "%(grammar|extends|include|version)[\\ \\t]+[\\ \\t]*([^;\\n]*?)[\\ \\t]*(?:\\s|\\#.*\\n)*?(?:\\n(?:\\s|\\#.*\\n)*|;(?:\\s|\\#.*\\n)*|\\z)"
        },
        "meta_section": {
          "+min": 0,
          ".any": [
            {
              ".ref": "meta_definition"
            }, {
              ".rgx": "(?:\\s|\\#.*\\n)+"
            }
          ]
        },
        "regular_expression": {
          ".rgx": "/([^/]*)/"
        },
        "rule_definition": {
          ".all": [
            {
              ".ref": "rule_start"
            }, {
              ".ref": "rule_group"
            }, {
              ".ref": "ending"
            }
          ]
        },
        "rule_group": {
          ".any": [
            {
              ".ref": "any_group"
            }, {
              ".ref": "all_group"
            }
          ]
        },
        "rule_item": {
          ".any": [
            {
              ".ref": "rule_reference"
            }, {
              ".ref": "regular_expression"
            }, {
              ".ref": "bracketed_group"
            }, {
              ".ref": "whitespace_token"
            }, {
              ".ref": "error_message"
            }
          ]
        },
        "rule_part": {
          "+max": "2",
          "+min": "1",
          ".ref": "rule_item",
          ".sep": {
            ".rgx": "(?:\\s|\\#.*\\n)+(%{1,2})(?:\\s|\\#.*\\n)+"
          }
        },
        "rule_reference": {
          ".rgx": "([!=\\+\\-\\.]?)(?:([a-zA-Z]\\w*\\b)|(?:<([a-zA-Z]\\w*\\b)>))((?:[\\*\\+\\?]|[0-9]+(?:\\-[0-9]+|\\+)?)?)(?![\\ \\t]*:)"
        },
        "rule_section": {
          "+min": 0,
          ".any": [
            {
              ".ref": "rule_definition"
            }, {
              ".rgx": "(?:\\s|\\#.*\\n)+"
            }
          ]
        },
        "rule_start": {
          ".rgx": "([a-zA-Z]\\w*\\b)[\\ \\t]*:(?:\\s|\\#.*\\n)*"
        },
        "whitespace_token": {
          ".rgx": "(\\~+)"
        }
      };
    };

    return Grammar;

  })(Parent);

}).call(this);
