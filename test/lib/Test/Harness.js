// Generated by CoffeeScript 1.3.3
(function() {
  var CoffeeScript, arrayEgal, bold, currentFile, egal, enableColors, exec, failures, fs, func, green, name, passedTests, path, red, reset, startTime, _ref;

  global.log = function(message, color, explanation) {
    return console.log(color + message + reset + ' ' + (explanation || ''));
  };

  global.say = console.log;

  global.xxx = function() {
    console.log.apply(console, arguments);
    return process.exit(0);
  };

  fs = require('fs');

  path = require('path');

  CoffeeScript = require('coffee-script');

  exec = require('child_process').exec;

  enableColors = false;

  if (process.platform !== 'win32') {
    enableColors = !process.env.NODE_DISABLE_COLORS;
  }

  bold = red = green = reset = '';

  if (enableColors) {
    bold = '\x1B[0;1m';
    red = '\x1B[0;31m';
    green = '\x1B[0;32m';
    reset = '\x1B[0m';
  }

  startTime = Date.now();

  currentFile = null;

  passedTests = 0;

  failures = [];

  _ref = require('assert');
  for (name in _ref) {
    func = _ref[name];
    global[name] = func;
  }

  global.CoffeeScript = CoffeeScript;

  global.test = function(description, fn) {
    try {
      fn.test = {
        description: description,
        currentFile: currentFile
      };
      fn.call(fn);
      return ++passedTests;
    } catch (e) {
      if (description != null) {
        e.description = description;
      }
      if (fn.toString != null) {
        e.source = fn.toString();
      }
      return failures.push({
        filename: currentFile,
        error: e
      });
    }
  };

  egal = function(a, b) {
    if (a === b) {
      return a !== 0 || 1 / a === 1 / b;
    } else {
      return a !== a && b !== b;
    }
  };

  arrayEgal = function(a, b) {
    var el, idx, _i, _len;
    if (egal(a, b)) {
      return true;
    } else if (a instanceof Array && b instanceof Array) {
      if (a.length !== b.length) {
        return false;
      }
      for (idx = _i = 0, _len = a.length; _i < _len; idx = ++_i) {
        el = a[idx];
        if (!arrayEgal(el, b[idx])) {
          return false;
        }
      }
      return true;
    }
  };

  global.eq = function(a, b, msg) {
    return ok(egal(a, b), msg);
  };

  global.arrayEq = function(a, b, msg) {
    return ok(arrayEgal(a, b), msg);
  };

  process.on('exit', function() {
    var col, error, fail, filename, jsFilename, line, match, message, time, _i, _len, _ref1, _ref2, _ref3;
    time = ((Date.now() - startTime) / 1000).toFixed(2);
    message = "passed " + passedTests + " tests in " + time + " seconds" + reset;
    if (!failures.length) {
      return log(message, green);
    }
    log("failed " + failures.length + " and " + message, red);
    for (_i = 0, _len = failures.length; _i < _len; _i++) {
      fail = failures[_i];
      error = fail.error, filename = fail.filename;
      jsFilename = filename.replace(/\.coffee$/, '.js');
      match = (_ref1 = error.stack) != null ? _ref1.match(new RegExp(fail.file + ":(\\d+):(\\d+)")) : void 0;
      if (!match) {
        match = (_ref2 = error.stack) != null ? _ref2.match(/on line (\d+):/) : void 0;
      }
      if (match) {
        _ref3 = match, match = _ref3[0], line = _ref3[1], col = _ref3[2];
      }
      console.log('');
      if (error.description) {
        log("  " + error.description, red);
      }
      log("  " + error.stack, red);
      log("  " + jsFilename + ": line " + (line != null ? line : 'unknown') + ", column " + (col != null ? col : 'unknown'), red);
      if (error.source) {
        console.log("  " + error.source);
      }
    }
  });

  exports.run = function(paths) {
    var code, file, filename, files, find, _i, _j, _len, _len1;
    if (paths == null) {
      paths = process.argv.slice(2);
    }
    if (!paths.length) {
      paths = ['test'];
    }
    files = [];
    find = function(path) {
      var p, stat, _i, _len, _ref1, _results;
      try {
        stat = fs.lstatSync(path);
      } catch (error) {
        return;
      }
      if (stat.isFile()) {
        if (path.match(/\.coffee$/i)) {
          if (!path.match(/\/src\//)) {
            return files.push(path);
          }
        }
      } else if (stat.isDirectory()) {
        _ref1 = fs.readdirSync(path);
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          p = _ref1[_i];
          _results.push(find(path + '/' + p));
        }
        return _results;
      }
    };
    for (_i = 0, _len = paths.length; _i < _len; _i++) {
      path = paths[_i];
      find(path);
    }
    for (_j = 0, _len1 = files.length; _j < _len1; _j++) {
      file = files[_j];
      currentFile = filename = file;
      code = String(fs.readFileSync(filename));
      try {
        require.main = {};
        CoffeeScript.run(code, {
          filename: filename
        });
      } catch (error) {
        failures.push({
          filename: filename,
          error: error
        });
      }
    }
    return !failures.length;
  };

}).call(this);
